# 0) Lifecycle Manager ────────────────────────────────
lifecycle_manager_navigation:
  ros__parameters:
    use_sim_time: true
    autostart: true
    node_names:
      - bt_navigator
      - map_server
      - global_costmap
      - local_costmap
      - planner_server
      - smoother_server
      - controller_server

# 1) BT Navigator Service ────────────────────────────────
bt_navigator:
  ros__parameters:
    use_sim_time: true
    global_frame: "map"
    robot_base_frame: "base_link"
    odom_topic: "odom"
    default_server_timeout: 20.0
    action_server_result_timeout: 10.0
    bt_loop_duration: 10
    # (A) 기본 BT XML: 사전정의 트리 사용
    # 예: "navigate_to_pose_w_replanning_and_recovery.xml" 등
    default_nav_to_pose_bt_xml: "behaior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "behaior_trees/navigate_through_poses_w_replanning_and_recovery.xml"
    # (B) 실행 시점에 Action goal.behavior_tree로 오버라이드 가능
    #    Nav2의 표준 BT 플러그인 라이브러리 목록(필요한 것 위주)
    enable_groot_monitoring: true
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_planner_selector_bt_node
      - nav2_smoother_selector_bt_node
      # 필요시 추가…

# 2) Map Server ────────────────────────────────
map_server:
  ros__parameters:
    use_sim_time: true
    yaml_filename: "maps/map.yaml"
    topic_name: "map"
    frame_id: "map"

# 3) Global Costmap ────────────────────────────────
global_costmap:
  ros__parameters:
    use_sim_time: true
    global_frame: "map"
    robot_base_frame: "base_link"
    transform_tolerance: 0.2

    # Static map 기반이면 width/height/resolution을 굳이 중복 지정할 필요는 없습니다.
    # 아래는 명시하고 싶을 때의 예시(맵 크기/해상도와 일치시킬 것):
    # width: <meters>
    # height: <meters>
    # resolution: <meters_per_cell>

    update_frequency: 5.0
    publish_frequency: 1.0
    track_unknown_space: true
    always_send_full_costmap: true

    # 로봇 형상(둘 중 하나만 선택)
    # robot_radius: 0.7
    footprint: [[0.6, 0.48], [0.6, -0.48], [-0.6, -0.48], [-0.6, 0.48]]

    plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
    static_layer:
      plugin: "nav2_costmap_2d::StaticLayer"
      map_topic: "/map"
      subscribe_to_updates: true

    # (옵션1) 깊이 포인트클라우드를 2D 장애물로 사용
    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      observation_sources: depth
      depth:
        data_type: "PointCloud2"
        topic: "<depth_points_topic>"      # 예: /camera/depth/points
        expected_update_rate: 0.0
        min_obstacle_height: 0.0
        max_obstacle_height: 2.0
        obstacle_range: 8.0
        raytrace_range: 10.0
        marking: true
        clearing: true
        inf_is_valid: false
      observation_persistence: 0.0         # >0이면 "메모리" 지속시간(초)

    # (옵션2) 3D 복셀 레이어 사용 (옵션1 대신)
    # voxel_layer:
    #   plugin: "nav2_costmap_2d::VoxelLayer"
    #   publish_voxel_map: false
    #   origin_z: 0.0
    #   z_voxels: 16
    #   z_resolution: 0.05
    #   max_obstacle_height: 2.0
    #   observation_sources: depth
    #   depth:
    #     data_type: "PointCloud2"
    #     topic: "<depth_points_topic>"
    #     marking: true
    #     clearing: true
    #     min_obstacle_height: 0.0
    #     max_obstacle_height: 2.0
    #     obstacle_range: 8.0
    #     raytrace_range: 10.0

    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.6
      cost_scaling_factor: 3.0

    # (고급) 경사/거칠기 기반 Traversability를 비용으로 쓰고 싶다면:
    # plugins: ["static_layer", "traversability_layer", "inflation_layer"]
    # traversability_layer:
    #   plugin: "your_custom_plugins/TraversabilityLayer"
    #   topic: "/traversability_grid"   # nav_msgs/OccupancyGrid 또는 커스텀
    #   marking: true
    #   clearing: false

# 4) Local Costmap ────────────────────────────────
local_costmap:
  ros__parameters:
    use_sim_time: true
    global_frame: "odom"             # 지역/구동 관성 프레임
    robot_base_frame: "base_link"
    transform_tolerance: 0.2
    rolling_window: true
    width: 7.0                      # 로봇 주변 창 크기
    height: 7.0
    resolution: 0.05
    update_frequency: 10.0
    publish_frequency: 5.0
    track_unknown_space: true
    always_send_full_costmap: false

    # 로봇 형상
    # robot_radius: 0.25
    footprint: [[0.25, 0.20], [0.25, -0.20], [-0.25, -0.20], [-0.25, 0.20]]

    # Local은 보통 정적레이어 없이도 동작 가능하나, 정적지도에 기반한 주변 비용을 유지하고 싶다면 StaticLayer 포함
    plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

    static_layer:
      plugin: "nav2_costmap_2d::StaticLayer"
      map_topic: "/traversability_occupancy"
      subscribe_to_updates: true
      trinary_costmap: false          # ← preserve 0..100 as graded costs
      lethal_threshold: 100           # usual default; tune if needed
      unknown_cost_value: 0           # unknown as free (or 255 for unknown-as-lethal)

    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      observation_sources: depth
      depth:
        data_type: "PointCloud2"
        topic: "<depth_points_topic>"
        expected_update_rate: 0.0
        min_obstacle_height: 0.0
        max_obstacle_height: 2.0
        obstacle_range: 6.0
        raytrace_range: 8.0
        marking: true
        clearing: true
        inf_is_valid: false
      observation_persistence: 0.5       # 관측 지속(초). 너무 길면 유령 장애물

    # (필요 시) voxel_layer로 대체 가능 — 위 Global의 voxel_layer 참고

    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.6
      cost_scaling_factor: 3.0

# 5) Planner ────────────────────────────────
planner_server:
  ros__parameters:
    use_sim_time: true
    expected_planner_frequency: 5.0
    # 두 가지 중 택1 — 기본은 Smac2D 권장(실외/연속 비용에 강함)
    planner_plugins: ["SmacPlanner"]   # 또는 ["GridBased"]

    # (권장) Smac Planner 2D
    SmacPlanner:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.5
      use_astar: true
      allow_unknown: true
      minimum_search_window: 10
      # motion_model_for_search: "2D"   # 기본 2D. 필요 시 "Dubin"/"Reeds-Shepp"

    # (대안) Navfn
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

# 6) Smoother ────────────────────────────────
smoother_server:
  ros__parameters:
    use_sim_time: true
    # 필요에 따라 하나 이상
    smoother_plugins: ["SimpleSmoother"]
    SimpleSmoother:
      plugin: "nav2_smoother/SimpleSmoother"
      tolerance: 0.001
      max_iterations: 100
      do_refinement: true
    # (대안) Constrained Smoother 등 사용 가능

# 7) Controller ────────────────────────────────
controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 10.0

    # 진행/목표 체크(중요: 누락 빈번)
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: true

    # 컨트롤러 플러그인 — RPP + (옵션) MPPI 병행
    controller_plugins: ["FollowPath" # , "MPPI"
    ]

    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller/RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      min_lookahead_dist: 0.3
      lookahead_dist: 0.6
      use_velocity_scaled_lookahead_dist: true
      max_lookahead_dist: 1.5
      lookahead_time: 1.5
      transform_tolerance: 0.2
      rotate_to_heading_angular_vel: 0.5
      use_rotate_to_heading: true
      rotate_to_heading_min_angle: 0.1
      allow_reversing: false
      use_interpolation: true
      # 장애물 근접 감속(원하면 활성화)
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0

    # (옵션) MPPI 컨트롤러 — 필요 시 주석 해제 후 값 보정
    # MPPI:
    #   plugin: "nav2_mppi_controller/MPPIController"
    #   time_steps: <int>
    #   model_dt: <seconds>
    #   batch_size: <int>
    #   vx_std: <float>
    #   vy_std: <float>             # 비홀로노믹이면 0 또는 매우 작게
    #   wz_std: <float>
    #   num_rollouts: <int>
    #   motion_model: "DiffDrive"    # 로버에 맞게
    #   visualize: false
    #   # 비용 크리틱/가중치 등은 문서에 따라 별도 보정