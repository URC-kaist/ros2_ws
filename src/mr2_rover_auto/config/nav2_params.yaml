# 0) Lifecycle Manager ────────────────────────────────
lifecycle_manager_navigation:
  ros__parameters:
    autostart: true
    node_names:
      - bt_navigator
      - map_server
      - global_costmap
      - local_costmap
      - planner_server
      - smoother_server
      - controller_server

# 1) BT Navigator Service ────────────────────────────────
bt_navigator:
  ros__parameters:
    default_nav_to_pose_bt_xml: "behavior_trees/my_navigate_to_pose.xml"
    default_nav_through_poses_bt_xml: "behavior_trees/my_navigate_through_poses.xml"
    bt_loop_duration: 10 # ms
    default_server_timeout: 20 # ms
    global_frame: "map"
    robot_base_frame: "base_link"
    odom_topic: "odom"
    enable_groot_monitoring: true

# 2) Map Server ────────────────────────────────
map_server:
  ros__parameters:
    yaml_filename: "maps/map.yaml"
    topic_name: "map"
    frame_id: "map"

# 3) Global Costmap ────────────────────────────────
global_costmap:
  ros__parameters:
    always_send_full_costmap: true
    footprint_padding: 0.01  # 로봇 형상 패딩 (m)
    footprint: "[[0.6, 0.48], [0.6, -0.48], [-0.6, -0.48], [-0.6, 0.48]]"
    global_frame: "map"
    map_vis_z: 0.0
    publish_frequency: 1.0
    resolution: 0.4 # m/px
    robot_base_frame: "base_link"  # odom = base_link in our case
    track_unknown_space: true
    transform_tolerance: 0.2
    update_frequency: 5.0

    plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

    static_layer: # lidar map
      plugin: "nav2_costmap_2d::StaticLayer"
      map_topic: "/map"
      subscribe_to_updates: true

    obstacle_layer: # depth camera -> traversability
      plugin: "nav2_costmap_2d::ObstacleLayer"
      topic: /traversability_occupancy # OccupancyGrid
      marking: true
      clearing: false
      observation_persistence: 0.5

    inflation_layer: # add inflation
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.6
      cost_scaling_factor: 3.0

# 4) Local Costmap for MPPI ────────────────────────────────
local_costmap:
  ros__parameters:
    always_send_full_costmap: true
    footprint_padding: 0.01  # 로봇 형상 패딩 (m)
    footprint: "[[0.6, 0.48], [0.6, -0.48], [-0.6, -0.48], [-0.6, 0.48]]"
    global_frame: "odom"
    width: 7.0                      # 로봇 주변 창 크기
    height: 7.0
    map_vis_z: 0.001
    publish_frequency: 1.0
    resolution: 0.05 # m/px
    robot_base_frame: "base_link"  # odom = base_link in our case
    rolling_window: true
    track_unknown_space: true
    transform_tolerance: 0.2
    update_frequency: 5.0

    plugins: ["obstacle_layer", "inflation_layer"]

    # traversability
    obstacle_layer: # depth camera -> traversability (또는 depth camera 직접 사용)
      plugin: "nav2_costmap_2d::ObstacleLayer"
      topic: /traversability_occupancy # OccupancyGrid
      marking: true
      clearing: false
      observation_persistence: 0.0 # >0이면 "메모리" 지속시간(초)

    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      inflation_radius: 0.6
      cost_scaling_factor: 3.0

# 5) Planner ────────────────────────────────
planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    expected_planner_frequency: 5.0

    GridBased: # recognized by bt_xml
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.5
      allow_unknown: true

# 6) Smoother ────────────────────────────────
smoother_server:
  ros__parameters:
    smoother_plugins: ["SGSmoother"]
    SGSmoother: # recognized by bt_xml
      plugin: "nav2_smoother/SavitzkyGolaySmoother"
      refinement_num: 3

# 7) Controller ────────────────────────────────
controller_server:
  ros__parameters:
    controller_frequency: 10.0 # Hz

    # 진행/목표 체크(중요: 누락 빈번)
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]

    progress_checker: # AT LEAST move this much while this much
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: true

    # 컨트롤러 플러그인 — RPP + (옵션) MPPI 병행
    controller_plugins: ["FollowPath"]

    FollowPath: # recognized by bt_xml
      plugin: "nav2_regulated_pure_pursuit_controller/RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.6
      min_lookahead_dist: 0.3
      max_lookahead_dist: 1.5
      rotate_to_heading_angular_vel: 0.5
      use_velocity_scaled_lookahead_dist: true
      transform_tolerance: 0.2
      lookahead_time: 1.5
      use_rotate_to_heading: true
      rotate_to_heading_min_angle: 0.1
      allow_reversing: false
      interpolate_curvature_after_goal: true
      # 장애물 근접 감속
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0

    # (옵션) MPPI 컨트롤러 — 필요 시 주석 해제 후 값 보정 (실험치)
    # FollowPath:
    #   plugin: "nav2_mppi_controller/MPPIController"
    #   time_steps: 3
    #   model_dt: 0.1
    #   batch_size: 16
    #   vx_std: <float>
    #   vy_std: <float>             # 비홀로노믹이면 0 또는 매우 작게
    #   wz_std: <float>
    #   num_rollouts: <int>
    #   motion_model: "DiffDrive"    # 로버에 맞게
    #   visualize: false
    #   # 비용 크리틱/가중치 등은 문서에 따라 별도 보정